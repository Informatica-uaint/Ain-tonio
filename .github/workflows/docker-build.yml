# ====================================
# GITHUB WORKFLOW - Docker Build & Push
# Ain'tonio Discord Bot
# ====================================

name: Build and Push Docker Image

on:
  # Trigger en push a main
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  
  # Trigger en Pull Requests a main
  pull_request:
    branches: [ main, master ]
  
  # Trigger manual
  workflow_dispatch:

env:
  # Configuraci√≥n de la imagen
  REGISTRY: docker.io
  IMAGE_NAME: raztor/aintonio-bot

jobs:
  # ====================================
  # JOB: BUILD Y PUSH DE IMAGEN
  # ====================================
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    # ====================================
    # PASO 1: CHECKOUT DEL C√ìDIGO
    # ====================================
    - name: üì• Checkout repository
      uses: actions/checkout@v4
    
    # ====================================
    # PASO 2: CONFIGURAR DOCKER BUILDX
    # ====================================
    - name: üîß Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # ====================================
    # PASO 3: LOGIN A DOCKER HUB
    # ====================================
    - name: üîê Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    # ====================================
    # PASO 4: EXTRAER METADATA
    # ====================================
    - name: üìã Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # Tag latest para main branch
          type=ref,event=branch,suffix={{branch}}
          type=raw,value=latest,enable={{is_default_branch}}
          # Tags para versiones
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          # Tag para PRs
          type=pr
          # Tag con SHA para desarrollo
          type=sha,prefix={{branch}}-
    
    # ====================================
    # PASO 5: BUILD Y PUSH DE LA IMAGEN
    # ====================================
    - name: üê≥ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
    
    # ====================================
    # PASO 6: MOSTRAR RESULTADOS
    # ====================================
    - name: üìä Image digest
      if: github.event_name != 'pull_request'
      run: |
        echo "### üéâ Docker Image Built Successfully! üéâ" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Pull command:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # ====================================
  # JOB: SECURITY SCAN (OPCIONAL)
  # ====================================
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
    - name: üîç Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: üìã Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'