# ====================================
# GITHUB WORKFLOW - Docker Build & Push
# Versión corregida sin errores de CodeQL
# ====================================

name: Build and Push Docker Image

on:
  # Trigger en push a main
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]

  # Trigger en Pull Requests a main
  pull_request:
    branches: [ main, master ]

  # Trigger manual
  workflow_dispatch:

env:
  # Configuración de la imagen
  REGISTRY: docker.io
  IMAGE_NAME: raztor/aintonio-bot

# ====================================
# PERMISOS NECESARIOS
# ====================================
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ====================================
  # JOB: BUILD Y PUSH DE IMAGEN
  # ====================================
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    # ====================================
    # PASO 1: CHECKOUT DEL CÓDIGO
    # ====================================
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    # ====================================
    # PASO 2: CONFIGURAR DOCKER BUILDX
    # ====================================
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # ====================================
    # PASO 3: LOGIN A DOCKER HUB
    # ====================================
    - name: 🔐 Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # ====================================
    # PASO 4: EXTRAER METADATA
    # ====================================
    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # Tag latest para main branch
          type=ref,event=branch,suffix={{branch}}
          type=raw,value=latest,enable={{is_default_branch}}
          # Tags para versiones
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          # Tag con SHA para desarrollo
          type=sha,prefix={{branch}}-

    # ====================================
    # PASO 5: VALIDAR ESTRUCTURA
    # ====================================
    - name: 🔍 Validate project structure
      run: |
        echo "🔍 Validando estructura del proyecto..."
        
        # Verificar archivos críticos
        if [ ! -f "src/main.py" ]; then
          echo "❌ Error: src/main.py no encontrado"
          exit 1
        fi
        
        if [ ! -f "src/config/settings.py" ]; then
          echo "❌ Error: src/config/settings.py no encontrado"
          exit 1
        fi
        
        if [ ! -f "requirements.txt" ]; then
          echo "❌ Error: requirements.txt no encontrado"
          exit 1
        fi
        
        echo "✅ Estructura del proyecto validada"
        echo "📂 Archivos encontrados:"
        find src/ -name "*.py" | head -10

    # ====================================
    # PASO 6: BUILD Y PUSH DE LA IMAGEN
    # ====================================
    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

    # ====================================
    # PASO 7: PROBAR LA IMAGEN
    # ====================================
    - name: 🧪 Test Docker image
      if: github.event_name != 'pull_request'
      run: |
        echo "🧪 Probando imagen Docker..."
        
        # Probar que la imagen se ejecuta
        docker run --rm \
          -e DISCORD_TOKEN="test_token" \
          -e ENVIRONMENT="testing" \
          --entrypoint python \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          -c "import sys; sys.path.insert(0, '/app/src'); from config.settings import get_settings; print('✅ Image test passed')"

    # ====================================
    # PASO 8: MOSTRAR RESULTADOS
    # ====================================
    - name: 📊 Image digest
      if: github.event_name != 'pull_request'
      run: |
        echo "### 🎉 Docker Image Built Successfully! 🎉" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Pull command:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Structure validated:** ✅" >> $GITHUB_STEP_SUMMARY
        echo "**Image tested:** ✅" >> $GITHUB_STEP_SUMMARY

  # ====================================
  # JOB: SECURITY SCAN (CORREGIDO)
  # ====================================
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'

    # Permisos específicos para este job
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    # Checkout necesario para CodeQL
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    # ====================================
    # SCAN DE VULNERABILIDADES
    # ====================================
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true  # No fallar si hay vulnerabilidades

    # ====================================
    # UPLOAD RESULTS (CORREGIDO)
    # ====================================
    - name: 📋 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3  # ✅ Actualizado a v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-container-scan'
      continue-on-error: true  # No fallar si no se puede subir

    # ====================================
    # REPORTE DE SEGURIDAD
    # ====================================
    - name: 📊 Security scan summary
      if: always()
      run: |
        echo "### 🔒 Security Scan Completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "trivy-results.sarif" ]; then
          echo "**Status:** ✅ Scan completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "**Results:** Check the Security tab for detailed findings" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Status:** ⚠️ Scan completed with issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY